name: Send Slack Notification

on:
  workflow_call:
    inputs:
      DISPLAY_NAME:
        type: string
      TITLE:
        type: string
      TYPE:
        type: string
        required: true
        description: 'RELEASE or TESTS'
      VERSION:
        type: string
        default: '-'
      JOB_STATUS:
        type: string
      GITHUB_USER:
        default: ${{ github.actor }}
        type: string
      GITHUB_REPOSITORY:
        default: ${{ github.repository }}
        type: string
      GITHUB_BRANCH:
        type: string
      JOB_NO:
        default: ${{ github.run_number }}
        type: string
      CHANGELOG:
        type: string
        default: 'No changelog found for this release'
      IR:
        type: string
        default: '-'
      ENVIRONMENT:
        required: true
        type: string
        
    secrets:
      SLACK_WEBHOOK_URL:
        required: true

jobs:
  send_slack_notification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: Setup Node environment
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: checkout
        uses: actions/checkout@v3

      - name: Read package json
        id: read_package
        run: |
          display_name=$(npm pkg get displayName)
          if [[ "$display_name" == "{}" ]] || [[ -z "$display_name" ]]; then
            display_name=$(npm pkg get name)
          fi
          echo "DISPLAY_NAME=${display_name//\"}" >> $GITHUB_OUTPUT
          git fetch --tags
          echo "VERSION=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_OUTPUT

      - name: Read Slack notification Version Template
        id: slack_version_template_file
        if: ${{ inputs.TYPE == 'VERSION' }}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo 'CONTENT<<$EOF' >> $GITHUB_OUTPUT
          cat ./.github/workflows/slack_notifications/templates/slack_version.json >> $GITHUB_OUTPUT
          echo '$EOF' >> $GITHUB_OUTPUT

      - name: Read Slack notification Release Requested Template
        id: slack_release_requested_template_file
        if: ${{ inputs.JOB_STATUS == 'Requested' && inputs.TYPE == 'RELEASE' }}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo 'CONTENT<<$EOF' >> $GITHUB_OUTPUT
          cat ./.github/workflows/slack_notifications/templates/release/slack_release_requested.json >> $GITHUB_OUTPUT
          echo '$EOF' >> $GITHUB_OUTPUT
          
      - name: Read Slack notification Release Success Template
        id: slack_release_success_template_file
        if: ${{ inputs.JOB_STATUS == 'Success' && inputs.TYPE == 'RELEASE' }}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo 'CONTENT<<$EOF' >> $GITHUB_OUTPUT
          cat ./.github/workflows/slack_notifications/templates/release/slack_release_success.json >> $GITHUB_OUTPUT
          echo '$EOF' >> $GITHUB_OUTPUT
          
      - name: Read Slack notification Release Failure Template
        id: slack_release_failure_template_file
        if: ${{ inputs.JOB_STATUS == 'Failure' && inputs.TYPE == 'RELEASE'}}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo 'CONTENT<<$EOF' >> $GITHUB_OUTPUT
          cat ./.github/workflows/slack_notifications/templates/release/slack_release_failure.json >> $GITHUB_OUTPUT
          echo '$EOF' >> $GITHUB_OUTPUT

      - name: Read Slack notification Test Requested Template
        id: slack_tests_requested_template_file
        if: ${{ inputs.JOB_STATUS == 'Requested' && inputs.TYPE == 'TESTS'}}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo 'CONTENT<<$EOF' >> $GITHUB_OUTPUT
          cat ./.github/workflows/slack_notifications/templates/tests/slack_tests_requested.json >> $GITHUB_OUTPUT
          echo '$EOF' >> $GITHUB_OUTPUT

      - name: Read Slack notification Test Success Template
        id: slack_tests_success_template_file
        if: ${{ inputs.JOB_STATUS == 'Success' && inputs.TYPE == 'TESTS'}}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo 'CONTENT<<$EOF' >> $GITHUB_OUTPUT
          cat ./.github/workflows/slack_notifications/templates/tests/slack_tests_success.json >> $GITHUB_OUTPUT
          echo '$EOF' >> $GITHUB_OUTPUT

      - name: Read Slack notification Test Failure Template
        id: slack_tests_failure_template_file
        if: ${{ inputs.JOB_STATUS == 'Failure' && inputs.TYPE == 'TESTS'}}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo 'CONTENT<<$EOF' >> $GITHUB_OUTPUT
          cat ./.github/workflows/slack_notifications/templates/tests/slack_tests_failure.json >> $GITHUB_OUTPUT
          echo '$EOF' >> $GITHUB_OUTPUT
          
      - name: Get Slack Notification Release Template
        id: raw_slack_release_template
        if: inputs.TYPE == 'RELEASE'
        shell: bash
        run: |
          if [ '${{ inputs.JOB_STATUS }}' == 'Requested' ]
          then
            echo 'SLACK_CONTENT=${{toJSON(steps.slack_release_requested_template_file.outputs.CONTENT)}}' > $GITHUB_OUTPUT
          elif [ '${{ inputs.JOB_STATUS }}' == 'Success' ]
          then
            echo 'SLACK_CONTENT=${{toJSON(steps.slack_release_success_template_file.outputs.CONTENT)}}' > $GITHUB_OUTPUT
          elif [ '${{ inputs.JOB_STATUS }}' == 'Failure' ]
          then
            echo 'SLACK_CONTENT=${{toJSON(steps.slack_release_failure_template_file.outputs.CONTENT)}}' > $GITHUB_OUTPUT
          fi

      - name: Get Slack Notification Tests Template
        id: raw_slack_tests_template
        if: inputs.TYPE == 'TESTS'
        shell: bash
        run: |
          if [ '${{ inputs.JOB_STATUS }}' == 'Requested' ]
          then
            echo 'SLACK_CONTENT=${{toJSON(steps.slack_tests_requested_template_file.outputs.CONTENT)}}' > $GITHUB_OUTPUT
          elif [ '${{ inputs.JOB_STATUS }}' == 'Success' ]
          then
            echo 'SLACK_CONTENT=${{toJSON(steps.slack_tests_success_template_file.outputs.CONTENT)}}' > $GITHUB_OUTPUT
          elif [ '${{ inputs.JOB_STATUS }}' == 'Failure' ]
          then
            echo 'SLACK_CONTENT=${{toJSON(steps.slack_tests_failure_template_file.outputs.CONTENT)}}' > $GITHUB_OUTPUT
          fi

      - name: Get Slack Notification Version Template
        id: raw_slack_version_template
        if: inputs.TYPE == 'VERSION'
        shell: bash
        run: |
          echo 'SLACK_CONTENT=${{toJSON(steps.slack_version_template_file.outputs.CONTENT)}}' > $GITHUB_OUTPUT

      - name: Slack Markdown Converter
        id: slack_changelog
        if: inputs.TYPE == 'RELEASE' || inputs.TYPE == 'VERSION'
        uses: LoveToKnow/slackify-markdown-action@v1.0.0
        with:
          text: ${{ inputs.CHANGELOG }}

      - name: Prepare Changelog String
        id: changelog
        if: inputs.TYPE == 'RELEASE' || inputs.TYPE == 'VERSION'
        uses: actions/github-script@v5
        with:
          script: |
            const content = JSON.stringify(`${{ steps.slack_changelog.outputs.text }}`).replace(/\s+<.*?>\s\-\s/gm, ' ').replace(/\\n/gm, '\\\\n').replace(/"/gm, '');
            core.setOutput("content", content); 


      - name: Prepare Slack Release Template
        id: slack_release_template
        if: inputs.TYPE == 'RELEASE'
        env:
          JOB_STATUS: ${{ inputs.JOB_STATUS }}
          GITHUB_USER: ${{ inputs.GITHUB_USER }}
          DISPLAY_NAME: ${{ steps.read_package.outputs.DISPLAY_NAME }}
          VERSION: ${{ steps.read_package.outputs.VERSION }}
          GITHUB_REPOSITORY: ${{ inputs.GITHUB_REPOSITORY }}
          GITHUB_BRANCH: ${{ inputs.GITHUB_BRANCH }}
          ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
          JOB_NO: ${{ inputs.JOB_NO }}
          CHANGELOG: ${{ steps.changelog.outputs.content }}
          IR: ${{ inputs.IR }}
        uses: AndreasNel/string-vars-action@master
        with:
          instring: ${{ steps.raw_slack_release_template.outputs.SLACK_CONTENT }}

      - name: Prepare Slack Tests Template
        id: slack_tests_template
        if: inputs.TYPE == 'TESTS'
        env:
          JOB_STATUS: ${{ inputs.JOB_STATUS }}
          GITHUB_USER: ${{ inputs.GITHUB_USER }}
          TITLE: ${{ inputs.TITLE || 'Unit Tests'}}
          DISPLAY_NAME: ${{ steps.read_package.outputs.DISPLAY_NAME }}
          VERSION: ${{ steps.read_package.outputs.VERSION }}
          GITHUB_REPOSITORY: ${{ inputs.GITHUB_REPOSITORY }}
          GITHUB_BRANCH: ${{ inputs.GITHUB_BRANCH }}
          ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
          JOB_NO: ${{ inputs.JOB_NO }}
        uses: AndreasNel/string-vars-action@master
        with:
          instring: ${{ steps.raw_slack_tests_template.outputs.SLACK_CONTENT }}

      - name: Prepare Slack Version Template
        id: slack_version_template
        if: inputs.TYPE == 'VERSION'
        env:
          DISPLAY_NAME: ${{ steps.read_package.outputs.DISPLAY_NAME }}
          VERSION: ${{ steps.read_package.outputs.VERSION }}
          CHANGELOG: ${{ steps.changelog.outputs.content }}
          ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        uses: AndreasNel/string-vars-action@master
        with:
          instring: ${{ steps.raw_slack_version_template.outputs.SLACK_CONTENT }}

      
      - name: Send Version Slack notification
        if: inputs.TYPE == 'VERSION'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: ${{ fromJSON(steps.slack_version_template.outputs.outstring) }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Send Release Slack notification
        if: inputs.TYPE == 'RELEASE'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: ${{ fromJSON(steps.slack_release_template.outputs.outstring) }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Send Slack Tests notification
        if: inputs.TYPE == 'TESTS'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: ${{ fromJSON(steps.slack_tests_template.outputs.outstring) }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
